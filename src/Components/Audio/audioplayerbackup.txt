import React, { useEffect } from 'react';
import { useState, useRef } from 'react';
import './AudioPlayer.css'
import { BiSkipNext, BiSkipPrevious } from 'react-icons/bi'
import { FiPlay } from 'react-icons/fi'
import { CiPause1 } from 'react-icons/ci'

import { useSelector, useDispatch } from 'react-redux'
import { clearSongs, updateSong, updateSongsList } from '../../State/SongSlice'
import { current } from '@reduxjs/toolkit';

const AudioPlayer = () => {

    const { songs, currentSong, showSongs } = useSelector((state) => state.songs)

    const [url, setURL] = useState()
    const [playerSong, setPlayerSong] = useState()
    const [isPlaying, setIsPlaying] = useState(false)
    const [duration, setDuration] = useState(0)
    const [currentTime, setCurrentTime] = useState(0)


    const audioPlayer = useRef()
    const progressBar = useRef()
    const animationRef = useRef()

    useEffect(() => {
        const seconds = Math.floor(audioPlayer.current.duration);
        setDuration(seconds);
        progressBar.current.max = seconds;
    }, [audioPlayer?.current?.readyState]);

    const calculateTime = (secs) => {
        const minutes = Math.floor(secs / 60);
        const returnedMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;
        const seconds = Math.floor(secs % 60);
        const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;
        return `${returnedMinutes}:${returnedSeconds}`;
    }

    const togglePlayPause = () => {
        if (playerSong !== currentSong) {
            var title = currentSong.title.replace(/ /g, "%20");
            var artist = currentSong.artist.replace(/ "/g, "%20");
            let newURL = artist + "%20-%20" + title + '%20(' + currentSong.date + ').mp3'
            newURL = 'https://d3ljcvel4d9gwx.cloudfront.net/' + newURL
            setURL(newURL);
            setPlayerSong(currentSong);
            setIsPlaying(true);
        } else {
            const prevValue = isPlaying;
            setIsPlaying(!prevValue);
            if (!prevValue) {
                audioPlayer.current.play();
                animationRef.current = requestAnimationFrame(whilePlaying)
            } else {
                audioPlayer.current.pause();
                cancelAnimationFrame(animationRef.current);
            }
        }
    }
    

    const whilePlaying = () => {
        progressBar.current.value = audioPlayer.current.currentTime;
        changePlayerCurrentTime();
        animationRef.current = requestAnimationFrame(whilePlaying);
    }

    const changeRange = () => {
        audioPlayer.current.currentTime = progressBar.current.value;
        changePlayerCurrentTime();
    }

    const changePlayerCurrentTime = () => {
        progressBar.current.style.setProperty('--seek-before-width', `${progressBar.current.value / duration * 100}%`)
        setCurrentTime(progressBar.current.value);
    }

    const handleBackward = () => {
        progressBar.current.value = Number(progressBar.current.value) - 10
        changeRange()
    }

    const handleForward = () => {
        progressBar.current.value = Number(progressBar.current.value) + 10
        changeRange()
    }

    return (

        <div className='AudioPlayer'>
            <audio ref={audioPlayer} src={url} onLoadedData={togglePlayPause} type="audio/mpeg" preload="metadata"></audio>

            <button className='backward' onClick={handleBackward}><BiSkipPrevious /> </button>

            <button className='playPause' onClick={togglePlayPause}>
                {isPlaying ? <CiPause1 /> : <FiPlay />}
            </button>

            <button className='forward' onClick={handleForward}><BiSkipNext /> </button>

            {/* currentTime */}
            {/* <div className='currentTime'>{calculateTime(currentTime)}</div> */}

            {/* progressbar */}

            <input className='progressBar'
                ref={progressBar}
                defaultValue='0'
                type="range"
                onChange={changeRange} />

            {/* duration */}
            {/* <div className='duration'>{(duration && !isNaN(duration) ? calculateTime(duration) : '00:00')}</div> */}
        </div>

    );
}

export default AudioPlayer;